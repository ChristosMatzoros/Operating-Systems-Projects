Παππάς Απόστολος 2109 apopappas@inf.uth.gr
Ματζώρος Χρήστος Κωνσταντίνος 2169 cmatzoros@inf.uth.gr
Γιαννούκος Τριαντάφυλλος Ανάργυρος 2232 tgiannoukos@inf.uth.gr

 Για τη μεταγλώττιση των δύο προγραμμάτων που χρησιμοποιούν τα system calls αρκεί να εκτελεστεί η εντολή make μέσα στο
 φάκελο project_1_omada_2109_2169_2232.

Ο αρχικός αλγόριθμος SLOB Αllocator χρησιμοποιεί τον αλγόριθμο Next Fit για την επιλογή των σελίδων και
τον αλγόριθμο First Fit για την επιλογή του block μέσα στη σελίδα. Το αρνητικό αυτών των αλγορίθμων είναι
ο εξωτερικός κατακερματισμός που δημιουργούν. Για αυτό κάνουμε χρήση του αλγόριθμου Best Fit, τόσο για
την επιλογή της κατάλληλης σελίδας, όσο και για την επιλογή του κατάλληλου block μέσα σε αυτή. Ο Best Fit
μέσω μιας γραμμικής αναζήτησης κόστους Ο(n) βρίσκει κάθε φορά το τμήμα με το λιγότερο ελεύθερο χώρο που
να ικανοποιεί τις ανάγκες μας.


First Fit vs Best Fit:
	Διαισθητικά, πριν την διεξαγωγή κάποιου πειράματος περιμένουμε τον first fit να είναι πιο γρήγορος σε σχέση με στον
	best fit. Αυτό συμβαίνει γιατί αλγόριθμος first fit προσπελαύνει τη λίστα μέχρι απλά να βρει την κατάλληλη θέση,
	ενώ ο best fit διαπερνά γραμμικά ολόκληρη την λίστα για την διεξαγωγή κάποιου συμπεράσματος συγκρίνοντας κάθε φορά
	τα περιεχόμενά της.

Τι αλλαγές κάναμε:

*slob_page_alloc :
	H συνάρτηση slob_page_alloc με την χρήση του αλγόριθμου Best Fit κάνει αναζήτηση στα block της σελίδας,
	συγκρίνοντας τα καθώς διαπερνάμε την λίστα με ένα best block. Έτσι, βρίσκουμε τελικά  το καταλληλότερο
	block για κάθε αίτηση, δηλαδή εκείνο του οποίου του μέγεθος έχει τη μικρότερη διαφορά από εκείνο της
	αίτησης(εννοείται πως θα ισχύει η σχέση μέγεθος block >= μέγεθος αίτησης).


*slob_alloc :
	Υπάρχουν 2 προσεγγίσεις για την συνάρτηση slob_alloc, η οποία πλέον κάνει χρήση του αλγόριθμου Best Fit.

	Στην πρώτη προσέγγιση ελέγχουμε μόνο το συνολικό μέγεθος της σελίδας χωρίς να έχουμε κάποια γνώση για τα
	blocks από τα οποία αποτελείται. Έχοντας διαπεράσει μια από τις τρείς λίστες σελίδων βρίσκουμε στη κατάλληλη
	σελίδα για το τμήμα μνήμης που ζητήσαμε και καλούμε την slob_page_alloc. Σε αυτή την περίπτωση αν τελικά δεν
	βρεθεί το κατάλληλο μέγεθος block που αναζητείται στην συγκεκριμένη σελίδα, θα πρέπει να επαναληφθεί η γραμμική
	αναζήτηση στην λίστα των σελίδων, ψάχνοντας αυτή τη φορά για την δεύτερη καλύτερη σελίδα κ.ο.κ.

	Στην δεύτερη προσέγγιση, ο αλγόριθμος διαπερνάει κάθε σελίδα στην κατάλληλη λίστα και παράλληλα ελέγχει τη
	διαθεσιμότητα καθώς και την καλύτερη επιλογή των blocks ως προς την χωρητικότητά τους για την ικανοποίηση
	του αιτήματος. Με βάση το καλύτερο block κάθε σελίδας θα επιλέξουμε τελικά και την καταλληλότερη σελίδα.

	Θεωρούμε την πρώτη προσέγγιση μας ως πιο σωστή, καθώς χρησιμοποιεί αυστηρά Best Fit αλγόριθμο και σε επίπεδο
	σελίδων και σε επίπεδο blocks. Όμως, αν και δουλεύει σωστά, οι τεράστιοι χρόνοι απόκρισης του λειτουργικού με τη
	χρήση της συγκεκριμένης προσέγγισης είναι απαγορευτικοί. Χονδρικά, το σύστημα χρειάζεται κάτι παραπάνω από είκοσι
	λεπτά για να bootάρει, ενώ στη συνέχεια παρατηρούνται μεγάλες καθυστερήσεις στην απόκριση. Από την άλλη, χρησιμοποιώντας
	τη δεύτερη προσέγγιση, το σύστημά μας γίνεται αισθητά ταχύτερο στην έναρξη και την απόκριση. Για αυτόν τον λόγο
	επιλέξαμε να διεξάγουμε τα πειράματά μας χρησιμοποιώντας τη δεύτερη προσέγγιση. Παρ'όλα αυτά, στο αρχείο slob.c διατηρούμε
	σε σχόλια και την πρώτη μας προσέγγιση.


	Πειραματικά συγκρίνοντας τους δύο αλγόριθμους επιβεβαιώνουμε την προηγούμενη μας διαίσθηση. Το σύστημά μας χρησιμοποιώντας
	Best Fit είναι πιο αργό συγκριτικά με την περίπτωση όπου χρησιμοποιούμε τον αλγόριθμο First Fit.


ΣΤΑΤΙΣΤΙΚΑ

	Για να μπορέσουμε να λάβουμε τα στατιστικά στοιχεία μας από τη λειτουργία χρειάστηκε να προσθέσουμε δύο συναρτήσεις στο αρχείο
	slob.c οι οποίες μας επιστρέφουν τις μεταβλητές total_free_mem και total_alloc_mem αντίστοιχα. Η μεταβλητή total_free_mem υπολογίζεται
	μετά το spin lock αφού πρώτα μηδενιστεί στην slob_alloc. Από την άλλη, η μεταβλητή total_alloc_mem αλλάζει όποτε χρησιμοποιούνται
	οι συναρτήσιες slob_new_pages και slob_free_pages καθώς εκεί έχουμε αλλαγές στη λίστα των σελίδων.

	Μέσω της εφαρμογής που δημιουργήσαμε παίρνουμε τα παρακάτω αποτελέσματα:


                                 best fit               |                  first fit
                                                        |
                  allocated_memory        free_memory   |    allocated_memory     free_memory
                        1742048             2008862     |       1786446             2614416
                        1781924	            2012674     |       1746422             2778198
                        1787268	            2011038     |       1686424             2894686
                        1791540	            2010214     |       1786428             3107604
                        1794744	            2011916     |       1788462             3117716


	Παρατηρούμε ότι η ελεύθερη μνήμη είναι αισθητά μεγαλύτερη όταν χρησιμοπουούμε τον αλγόριθμο first fit.
	Επίσης, παρατηρείται πως ανεξαρτήτως του αλγορίθμου που χρησιμοποιούμε, η ελεύθερη μνήμη είναι περισσότερη
	από την δεσμευμένη.
	Η τμηματοποίηση περιορίζεται στον αλγόριθμο best fit. Παρόλα αυτά ο κατακερματισμός όταν
	χρησιμοποιούμε τον first fit παραμένει ένα σημαντικό πρόβλημα.

